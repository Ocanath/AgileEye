"EyeDiameter" = 35
"BasePlaneDistance" = "EyeDiameter"/2+19.84
"EyeClearance" = 2
"L2Thickness" = 8
"L2_ID" = 20
"vx" = 7
"vy" = 7
"vz" = 10
"parametric_end" = 1
"Rw_3_xx" = -("vz")/sqr(("vx")^2 + ("vz")^2)
"Rw_3_xy" = 0
"Rw_3_xz" = ("vx")/sqr(("vx")^2 + ("vz")^2)
"Rw_3_zx" = ("vx")/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"Rw_3_zy" = ("vy")/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"Rw_3_zz" = ("vz")/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"Rw_3_yx" = ("vx")*("vy")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4)
"Rw_3_yy" = -sqr(("vx")^2 + ("vz")^2)/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"Rw_3_yz" = ("vy")*("vz")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4)
"O2Targx" = -"BasePlaneDistance"*("vx")*("vy")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4)
"O2Targy" = "BasePlaneDistance"*sqr(("vx")^2 + ("vz")^2)/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"O2Targz" = -"BasePlaneDistance"*("vy")*("vz")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4)
"O2Targx_0" = -("BasePlaneDistance")*sqr(("vx")^2 + ("vz")^2)/sqr(("vx")^2 + ("vy")^2 + ("vz")^2)
"O2Targy_0" = -("BasePlaneDistance")*("vy")*("vz")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4)
"O2Targz_0" = ("BasePlaneDistance")*("vx")*("vy")/sqr(("vx")^4 + ("vx")^2*("vy")^2 + 2*("vx")^2*("vz")^2 + ("vy")^2*("vz")^2 + ("vz")^4) + ("BasePlaneDistance")


"theta2_s1" = arcsin((("BasePlaneDistance") - ("O2Targz_0"))/("BasePlaneDistance")) + pi
"theta2_s2" = -arcsin((("BasePlaneDistance") - ("O2Targz_0"))/("BasePlaneDistance"))

"theta1_s1" = arcsin(("O2Targy_0")/(("BasePlaneDistance")*cos(("Theta2")))) + pi
"theta1_s2" = -arcsin(("O2Targy_0")/(("BasePlaneDistance")*cos(("Theta2"))))
"theta1_s3" = -arccos(-("O2Targx_0")/(("BasePlaneDistance")*cos(("Theta2")))) + 2*pi
"theta1_s4" = arccos(-("O2Targx_0")/(("BasePlaneDistance")*cos(("Theta2"))))

"Theta1" = "theta1_s2" 'so far, theta1_s1 and theta1_s4 have agreed, and they agree with the sw constraint solver
"Theta2" = "theta2_s2"
"o2_x" = -("BasePlaneDistance")*cos(("Theta1"))*cos(("Theta2"))
"o2_y" = -("BasePlaneDistance")*sin(("Theta1"))*cos(("Theta2"))
"o2_z" = ("BasePlaneDistance")*(sin(("Theta2")) + 1)
"o1_x" = ("BasePlaneDistance")*sin(("Theta1"))
"o1_y" = -("BasePlaneDistance")*cos(("Theta1"))
"o1_z" = ("BasePlaneDistance")

"Actuator1_Theta" = atn("vx"/"vz")	'ik solution for the single link joint
"Actuator2_Theta" = "Theta1"		'ik solution for the double link joint